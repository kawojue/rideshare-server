generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model User {
  id                   String    @id @default(uuid()) @db.Uuid
  fullname             String
  status               Status    @default(ACTIVE)
  provider             Provider
  email                String    @unique
  phone                String    @unique
  provider_id          String?   @unique
  password             String?
  role                 Role
  refresh_token        String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastUsedBiometricAt  DateTime?
  lastUsedCredentialAt DateTime?
  lastLoggedInAt       DateTime?
  lastPasswordChanged  DateTime  @default(now())

  totp         Totp?
  inbox        Inbox?
  wallet       Wallet?
  profile      Profile?
  verification Verification?

  vehicles             Vehicle[]
  transactionHistories TxHistory[]
  banks                LinkedBank[]
  raters               Rating[]     @relation("RaterUser")
  ratings              Rating[]     @relation("TargetUser")
  sentMessages         Message[]    @relation("UserSentMessages")
  receivedMessages     Message[]    @relation("UserReceivedMessages")

  @@index([refresh_token])
}

model Profile {
  id             String    @id @default(uuid()) @db.Uuid
  avatar         Json?
  gender         Gender
  email_verified Boolean   @default(false)
  pin            String?
  lastPinChanged DateTime?
  biometric      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  address        String?

  emergencyContact EmergencyContact?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid
}

model Verification {
  id             String   @id @default(uuid()) @db.Uuid
  dob            DateTime
  nationalId     String   @unique
  driverLicense  String   @unique
  proofOfAddress Json
  approved       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  driver   User   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId String @unique @db.Uuid
}

model EmergencyContact {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(references: [id], fields: [profileId], onDelete: Cascade)
  profileId String  @unique @db.Uuid
}

model Vehicle {
  id                String   @id @default(uuid()) @db.Uuid
  brand             String
  model             String
  classification    String
  year              String?
  color             String
  seatNumber        Int
  vin               String   @unique
  plateNumber       String   @unique
  isOwner           Boolean
  agreementDocument Json?
  ownerName         String?
  ownerPhoneNumber  String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  amenity Amenity?

  driver   User   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId String @db.Uuid
}

model Amenity {
  id                 String   @id @default(uuid()) @db.Uuid
  wifi               Boolean  @default(false)
  music              Boolean  @default(false)
  phoneCharger       Boolean  @default(false)
  temperatureControl Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  vehicle   Vehicle @relation(references: [id], fields: [vehicleId], onDelete: Cascade)
  vehicleId String  @unique @db.Uuid
}

model Cache {
  id           String    @id @default(uuid()) @db.Uuid
  key          String    @unique
  value        Int?
  expires_in   Int?
  scope        String?
  token_type   String?
  access_token String?
  type         CacheType
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Totp {
  id          String    @id @default(uuid()) @db.Uuid
  totp        String?
  totp_expiry DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId String @unique @db.Uuid
}

model LinkedBank {
  id            String   @id @default(uuid()) @db.Uuid
  bankName      String
  accountName   String
  accountNumber String
  bankCode      String
  primary       Boolean  @default(false)
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
}

model TxHistory {
  id                       String         @id @default(uuid()) @db.Uuid
  ip                       String?
  status                   TransferStatus
  amount                   Float          @default(0.00)
  type                     TxType
  description              String?
  channel                  String?
  reference                String         @unique
  transfer_code            String?
  recipient_code           String?
  authorization_code       String?
  totalFee                 Float          @default(0.00)
  paystackFee              Float          @default(0.00)
  processingFee            Float          @default(0.00)
  destinationBankCode      String?
  destinationBankName      String?
  destinationAccountName   String?
  destinationAccountNumber String?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid
}

model Wallet {
  id                  String    @id @default(uuid()) @db.Uuid
  balance             Float     @default(0.00)
  locked              Boolean   @default(false)
  lastDepositedAt     DateTime?
  lastWithdrawnAt     DateTime?
  lastAmountDeposited Float     @default(0.00)
  lastAmountWithDrawn Float     @default(0.00)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid
}

model Modmin {
  id            String   @id @default(uuid()) @db.Uuid
  fullname      String
  refresh_token String?
  status        Status   @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  inbox Inbox?

  sentMessages     Message[] @relation("ModminSentMessages")
  receivedMessages Message[] @relation("ModminReceivedMessages")

  @@index([refresh_token])
}

model Rating {
  id        String   @id @default(uuid()) @db.Uuid
  point     Float
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  targetUserId String @db.Uuid
  raterUserId  String @db.Uuid

  target User @relation("TargetUser", fields: [targetUserId], references: [id], onDelete: Cascade)
  rater  User @relation("RaterUser", fields: [raterUserId], references: [id], onDelete: Cascade)
}

model Inbox {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  modminId String? @unique @db.Uuid
  userId   String? @unique @db.Uuid

  modmin Modmin? @relation(references: [id], fields: [modminId], onDelete: Cascade)
  user   User?   @relation(references: [id], fields: [userId], onDelete: Cascade)

  messages Message[]
}

model Message {
  id String @id @default(uuid()) @db.Uuid

  content   String?
  file      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inboxId          String  @db.Uuid
  userSenderId     String? @db.Uuid
  modminSenderId   String? @db.Uuid
  userReceiverId   String? @db.Uuid
  modminReceiverId String? @db.Uuid

  inbox          Inbox   @relation(fields: [inboxId], references: [id])
  userSender     User?   @relation("UserSentMessages", fields: [userSenderId], references: [id], onDelete: Cascade)
  modminSender   Modmin? @relation("ModminSentMessages", fields: [modminSenderId], references: [id], onDelete: Cascade)
  userReceiver   User?   @relation("UserReceivedMessages", fields: [userReceiverId], references: [id], onDelete: Cascade)
  modminReceiver Modmin? @relation("ModminReceivedMessages", fields: [modminReceiverId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  DRIVER
  PASSENGER
  MODERATOR
}

enum Gender {
  Male
  Female
}

enum Provider {
  Local
  Google
}

enum Status {
  ACTIVE
  SUSPENDED
}

enum TxType {
  DEPOSIT
  PAYMENT
  WITHDRAWAL
}

enum CacheType {
  PIN
}

enum TransferStatus {
  FAILED
  PENDING
  SUCCESS
  REVERSED
  RECEIVED
  COMPLETED
  SUCCESSFUL
}

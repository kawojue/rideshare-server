generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model User {
  id                  String        @id @default(uuid()) @db.Uuid
  firstname           String
  lastname            String
  middlename          String?
  customerCode        String?       @unique @map("customer_code")
  status              AccountStatus @default(ACTIVE)
  email               String?       @unique
  phone               String?       @unique
  significant         String?       @unique
  regionCode          String?       @map("region_code")
  countryCode         String?       @map("country_code")
  providerId          String?       @unique @map("provider_id")
  role                Role
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  lastUsedBiometricAt DateTime?     @map("last_used_biometric_at")

  inbox        Inbox?
  wallet       Wallet?
  profile      Profile?
  verification Verification?

  cache                Cache[]
  vehicles             Vehicle[]
  transactionHistories TxHistory[]
  mobileDevices        MobileDevice[]
  raters               Rating[]       @relation("RaterUser")
  ratings              Rating[]       @relation("TargetUser")
  sentMessages         Message[]      @relation("UserSentMessages")
  receivedMessages     Message[]      @relation("UserReceivedMessages")
  receivedCallLogs     CallLog[]      @relation("UserReceivedCalls")
  initiatedCallLogs    CallLog[]      @relation("UserInitiatedCalls")
  notifications        Notification[]

  @@index([role])
  @@index([status])
  @@index([firstname, lastname])
  @@index([createdAt, updatedAt])
  @@map("users")
}

model Profile {
  id        String   @id @default(uuid()) @db.Uuid
  avatar    Json?
  gender    Gender
  biometric Boolean  @default(false)
  address   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  emergencyContact EmergencyContact?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id") @db.Uuid

  @@index([gender])
  @@index([address])
  @@index([createdAt, updatedAt])
  @@map("profiles")
}

model MobileDevice {
  id                String    @id @default(uuid()) @db.Uuid
  deviceId          String?   @map("device_id")
  model             String
  type              String
  os                String
  vendor            String?
  lastLoggedInAt    DateTime? @map("last_logged_in_at")
  notificationToken String?   @map("notification_token")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id") @db.Uuid

  @@unique([userId, deviceId])
  @@index([createdAt, updatedAt])
  @@map("mobile_devices")
}

model Verification {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  idNumber           String?   @unique @map("id_number")
  idType             IDType?   @map("id_type")
  idVerified         Boolean   @default(false) @map("id_verified")
  idVerifiedAt       DateTime? @map("id_verified_at")
  idVerificationData Json?     @map("id_verification_data")

  driverLicense         String? @unique @map("driver_license")
  driverLicenseData     Json?   @map("driver_license_data")
  driverLicenseVerified Boolean @default(false) @map("driver_license_verified")

  proofOfAddress  Json?   @map("proof_of_address")
  landmark        String?
  addressVerified Boolean @default(false) @map("address_verified")

  driver   User   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId String @unique @map("driver_id") @db.Uuid

  @@index([createdAt, updatedAt])
  @@map("verification")
}

model EmergencyContact {
  id        String   @id @default(uuid()) @db.Uuid
  fullname  String
  address   String
  email     String
  phone     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile   Profile @relation(references: [id], fields: [profileId], onDelete: Cascade)
  profileId String  @unique @map("profile_id") @db.Uuid

  @@index([fullname])
  @@index([createdAt, updatedAt])
  @@map("emergency_contacts")
}

model Vehicle {
  id                   String   @id @default(uuid()) @db.Uuid
  make                 String
  model                String
  description          String?
  year                 String?
  imageUrl             String?  @map("image_url")
  color                String?
  seatNumber           Int      @map("seat_number")
  plateNumber          String   @unique @map("plate_number")
  isOwner              Boolean  @map("is_ownwer")
  agreementDocument    Json?    @map("agreement_document")
  ownerName            String?  @map("owner_name")
  ownerPhoneNo         String?  @map("owner_phone_number")
  ownerPhoneNoProperty Json?    @map("owner_phone_number_data")
  verified             Boolean  @default(false)
  category             String
  metadata             Json?
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  amenity Amenity?

  driver   User   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId String @map("driver_id") @db.Uuid

  @@index([createdAt, updatedAt])
  @@map("vehicles")
}

model Amenity {
  id                 String   @id @default(uuid()) @db.Uuid
  wifi               Boolean  @default(false)
  music              Boolean  @default(false)
  phoneCharger       Boolean  @default(false) @map("phone_charger")
  temperatureControl Boolean  @default(false) @map("temperature_control")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  vehicle   Vehicle @relation(references: [id], fields: [vehicleId], onDelete: Cascade)
  vehicleId String  @unique @map("vehicle_id") @db.Uuid

  @@index([createdAt, updatedAt])
  @@map("vehicle_amenities")
}

model Cache {
  id            String    @id @default(uuid()) @db.Uuid
  key           String    @unique
  value         Int?
  expires_in    String?
  scope         String?
  token_type    String?
  access_token  String?
  refresh_token String?
  type          CacheType
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  userId   String? @map("user_id") @db.Uuid
  modminId String? @map("modmin_id") @db.Uuid

  user   User?   @relation(references: [id], fields: [userId], onDelete: Cascade)
  modmin Modmin? @relation(references: [id], fields: [modminId], onDelete: Cascade)

  @@index([access_token])
  @@index([refresh_token])
  @@index([createdAt, updatedAt])
  @@map("cache")
}

model Notification {
  id        String           @id @default(uuid()) @db.Uuid
  topic     NotificationType
  body      String
  title     String?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  userId String? @map("user_id") @db.Uuid
  user   User?   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([topic])
  @@index([createdAt, updatedAt])
  @@map("notifications")
}

model TxHistory {
  id                       String         @id @default(uuid()) @db.Uuid
  ip                       String?
  status                   TransferStatus
  amount                   Decimal        @default(0.00) @db.Decimal(10, 2)
  type                     TxType
  description              String?
  reference                String         @unique
  transferCode             String?        @map("transfer_code")
  recipientCode            String?        @map("recipient_code")
  authorization            Json?
  totalFee                 Decimal        @default(0.00) @map("total_fee") @db.Decimal(10, 2)
  paystackFee              Decimal        @default(0.00) @map("paystack_fee") @db.Decimal(10, 2)
  processingFee            Decimal        @default(0.00) @map("processing_fee") @db.Decimal(10, 2)
  destinationBankCode      String?        @map("destination_bank_code")
  destinationBankName      String?        @map("destination_bank_name")
  destinationAccountName   String?        @map("destination_account_name")
  destinationAccountNumber String?        @map("destination_account_number")
  narration                String?
  paidAt                   DateTime?
  createdAt                DateTime       @default(now()) @map("created_at")
  updatedAt                DateTime       @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id") @db.Uuid

  @@index([status])
  @@index([createdAt, updatedAt])
  @@map("transaction_histories")
}

model Wallet {
  id                  String    @id @default(uuid()) @db.Uuid
  locked              Boolean   @default(false)
  accountName         String?   @map("account_name")
  accountNumber       String?   @map("account_number")
  dvaId               String?   @map("dva_id")
  currency            String?
  bankName            String?   @map("bank_name")
  balance             Decimal   @default(0.00) @db.Decimal(10, 2)
  lastApprovedAmount  Decimal   @default(0.00) @map("last_approved_amount") @db.Decimal(10, 2)
  lastDepositedAmount Decimal   @default(0.00) @map("last_deposited_amount") @db.Decimal(10, 2)
  lastDepositedAt     DateTime? @map("last_deposited_at")
  lastApprovedAt      DateTime? @map("last_approved_at")
  lastRequestedAt     DateTime? @map("last_requested_at")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id") @db.Uuid

  requests WithdrwalRequest[]

  @@index([createdAt, updatedAt])
  @@map("wallets")
}

model WithdrwalRequest {
  id                       String       @id @default(uuid()) @db.Uuid
  amount                   Decimal      @db.Decimal(10, 2)
  locked                   Boolean      @default(false)
  status                   PayoutStatus @default(PENDING)
  destinationBankCode      String?      @map("destination_bank_code")
  destinationBankName      String?      @map("destination_bank_name")
  destinationAccountName   String?      @map("destination_account_name")
  destinationAccountNumber String?      @map("destination_account_number")
  createdAt                DateTime     @default(now()) @map("created_at")
  updatedAt                DateTime     @updatedAt @map("updated_at")

  walletId String  @map("wallet_id") @db.Uuid
  modminId String? @map("modmin_id") @db.Uuid

  wallet Wallet  @relation(fields: [walletId], references: [id], onDelete: Cascade)
  modmin Modmin? @relation(references: [id], fields: [modminId], onDelete: Cascade)

  @@index([status])
  @@index([createdAt, updatedAt])
  @@map("withdrawal_requests")
}

model Modmin {
  id        String        @id @default(uuid()) @db.Uuid
  fullname  String
  email     String        @unique
  avatar    String?
  password  String
  role      Role
  status    AccountStatus @default(ACTIVE)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  inbox Inbox?

  cache              Cache[]
  withdrawalRequests WithdrwalRequest[]
  sentMessages       Message[]          @relation("ModminSentMessages")
  receivedMessages   Message[]          @relation("ModminReceivedMessages")

  @@index([role])
  @@index([status])
  @@index([fullname])
  @@index([createdAt, updatedAt])
  @@map("admins_and_moderators")
}

model Rating {
  id        String   @id @default(uuid()) @db.Uuid
  point     Float
  review    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  targetUserId String @map("target_user_id") @db.Uuid
  raterUserId  String @map("rater_user_id") @db.Uuid

  target User @relation("TargetUser", fields: [targetUserId], references: [id], onDelete: Cascade)
  rater  User @relation("RaterUser", fields: [raterUserId], references: [id], onDelete: Cascade)

  @@index([point])
  @@index([createdAt, updatedAt])
  @@map("ratings")
}

model Inbox {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  modminId String? @unique @map("modmin_id") @db.Uuid
  userId   String? @unique @map("user_id") @db.Uuid

  modmin Modmin? @relation(references: [id], fields: [modminId], onDelete: Cascade)
  user   User?   @relation(references: [id], fields: [userId], onDelete: Cascade)

  messages Message[]

  @@index([createdAt, updatedAt])
  @@map("inboxes")
}

model Message {
  id String @id @default(uuid()) @db.Uuid

  content   String?
  file      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  inboxId          String  @map("inbox_id") @db.Uuid
  userSenderId     String? @map("user_sender_id") @db.Uuid
  modminSenderId   String? @map("modmin_sender_id") @db.Uuid
  userReceiverId   String? @map("user_receiver_id") @db.Uuid
  modminReceiverId String? @map("modmin_receiver_id") @db.Uuid

  inbox          Inbox   @relation(fields: [inboxId], references: [id])
  userSender     User?   @relation("UserSentMessages", fields: [userSenderId], references: [id], onDelete: Cascade)
  modminSender   Modmin? @relation("ModminSentMessages", fields: [modminSenderId], references: [id], onDelete: Cascade)
  userReceiver   User?   @relation("UserReceivedMessages", fields: [userReceiverId], references: [id], onDelete: Cascade)
  modminReceiver Modmin? @relation("ModminReceivedMessages", fields: [modminReceiverId], references: [id], onDelete: Cascade)

  @@index([createdAt, updatedAt])
  @@map("messages")
}

model CallLog {
  id         String     @id @default(uuid()) @db.Uuid
  endTime    DateTime?  @map("end_time")
  startTime  DateTime?  @map("start_time")
  callStatus CallStatus @map("call_status")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  callerId   String @map("caller_id") @db.Uuid
  receiverId String @map("receiver_id") @db.Uuid

  caller   User @relation("UserInitiatedCalls", fields: [callerId], references: [id], onDelete: Cascade)
  receiver User @relation("UserReceivedCalls", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([callStatus])
  @@index([createdAt, updatedAt])
  @@map("call_logs")
}

enum Role {
  ADMIN
  DRIVER
  PASSENGER
  MODERATOR
}

enum Gender {
  MALE
  FEMALE
}

enum Provider {
  Local
  Google
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
}

enum TxType {
  DEPOSIT
  PAYMENT
  WITHDRAWAL
}

enum CacheType {
  QOREID
}

enum PayoutStatus {
  GRANTED
  PENDING
  DECLINED
}

enum TransferStatus {
  FAILED
  PENDING
  SUCCESS
  REVERSED
  RECEIVED
  COMPLETED
  SUCCESSFUL
}

enum CallStatus {
  INITIATED
  ANSWERED
  REJECTED
  RECEIVED
  MISSED
  ENDED
}

enum IDType {
  NIN
  VOTER
  PASSPORT
}

enum NotificationType {
  GENERAL
  WEBHOOKS
  ACTIVITIES
  TRANSACTIONS
  ANNOUNCEMENTS
}
